#separator:tab
#html:true
#tags column:3
Difference between an internal an external fault.	Internal: fault of a component<div>External: fault is a propagated failure of another component or from outside the system</div>	
Name and explain the three fault categories	<b>Physical</b>:<div>- Malfunctioning of hardware</div><div>- Can be permanent or transient</div><div><b>Design</b>:</div><div>- May originate in hardware or software</div><div>- e.g. illegal condition in a while loop</div><div><b>Interaction</b>:</div><div>- Occur during operation and are caused by the environment</div><div>- e.g. illegal input of system oprator or radiation hitting the system</div>	
What is an error?	It is an illegal system state and can be propagated through a system generating other errors.<div>Example: a wrong assignment to a variable</div>	
What is failure?	Occurs when an error reaches the service interface of a system, resulting in system behaviour that is inconsistent with its specification.	
What does the execution of a system look like in terms of states?	There are two types of states:<div>- Correct</div><div>- Error: Tolerated error states and failure states</div><div><br></div><div>State trasitions are caused by atomic actions:</div><div>- Correct actions</div><div>- Fault actions</div><div>- Recovery actions</div>	
Explain the difference between a fault tolerant system and a failed controlled system.	<b>Fault tolerant system</b><div>- Never enters a failure state</div><div>- Errors occur but never reach the service boundary</div><div>- Works according to its specification</div><div>- Implies three steps: error detection, error analysis and recovery</div><div><br></div><div><b>Failed controlled system</b></div><div>- Allow recovery from a failure using special protocols e.g. it goes into a state from which corrective actions can be taken by an external controller.</div>	
Explain difference between fault prevention and fault removal.	<b>Fault prevention</b><div>- methods preventing faults being incorporated into a system</div><div><br></div><div><b>Fault removal</b></div><div>- techniques that eliminate faults during the design and development process</div><div>- validation, verification and debugging</div>	
Difference between reliability and safety.	<b>Reliability</b><div>- probability that a system is free of failures up to a certain time</div><div><br></div><div><b>Safety</b></div><div>- probability that the system is operating correctly or will fail in a safe manner at a certain time</div>	
What is the difference between the three levels of virtualisation?	<b>Bare-metal</b><div>- hypervisor runs on top of hardware</div><div><b>Hosted</b></div><div>- hypervisor runs inside a hosting OS, e.g. virtual box, parallels</div><div><b>OS-level</b></div><div>- containerisation</div><div>- containers share the kernel of the hosting OS</div>	
What is hardware-assisted virtualisation?	- it supports an orthogonal mode of CPU operation: VM mode and hypervisor mode<div>- instructions and events can be reserved for hypervisor mode, occurence in VM mode leads to an implicit switch to hypervisor mode</div><div>- applications run in ring 3 in VM mode, guest OS in ring 0 in VM mode, hypervisor in ring 0 in hypervisor mode</div><div>- advantage: VM can run any OS, reduces changes needed in the guest operating system</div><div>- disadvantage: old processors have no support</div>	
How are packets processed in network processors?	- checksum verification<div>- field extraction</div><div>- packet classification</div><div>- path selection</div><div>.....</div><div><br></div><div>The processor consists of several packet processing engines which do the above steps.</div>	
Name 4 different processor classes.	Signal processors, graphics processors, vector processors and network processors	
When does a software interrupt occur?	Examples:<div>- executes a privileged instruction in user mode</div><div>- has an arithemtic error e.g. division by zero</div><div>- accesses a virtual page with wrong permissions</div><div>- executes an emulated instruction</div>	
How are I/O signals handled?	same way as exceptions through interrupts	
Name 3 features of RISC	- single instruction format<div>- load/store architecture</div><div>- limited addressing mode</div><div>- one cycle machine instructions</div>	
Name 3 features of CISC	- instructions may take more than 10 cycles in CISC<div>- variable instruction format</div><div>- memory and register operands</div><div>- many specialised instructions</div>	
Disadvantages of the basic pipelined instruction cycle.	- slowest stage defines throughput<div>- all instructions have to go through all stages and all take the same time</div><div>- more complex control logic</div>	
What are pipeline hazards?	Situations that inhibit that the next instruction can be processed in the next stage of the pipeline, leading to interrupt of the synchronous execution in the pipeline.	
What are the different hazard classes?	<b>Resource or structural hazards</b><div>- two instructions in different stages require the same resource</div><div>- e.g. parallel memory access in IF and MA, subsequent instructions need the FP division hardware that is not implemented as a pipeline</div><div><b>Data hazards</b></div><div>- instruction access the same data as earlier instructions and these are not yet finished</div><div>- result from data dependencies</div><div><b>Control or branch hazards</b></div><div>- jump (loop, if condition etc.) in the controll flow</div>	
Why are anti and output dependencies called named dependencies?	Named dependencies would not exist if we have unlimited registers since we can simply store the values elsewhere	
When does write after read happen?	when WB is not at the end of the pipeline.	
Describe software solutions to data hazards in pipelines	- Implemented by the complier<div>- Insertion of NOPS</div><div>- reorder instructions in the instruction scheduling phase of the compiler, put independent instructions between dependent instructions</div>	
What are hardware solutions for data hazards in pipelining	- detect conflicts via hardware logic<div>- handling: interlocking or stalling, forwarding, forwarding with interlocking</div>	
What is interlocking or Stalling?	Stops instruction and all subsequent instructions for multiple cycles.	
What is forwarding in an instruction pipeline?	- direct forward of ALU results to the ALU input<div>- eliminates stall cycles</div><div>- requires additional hardware (forwarding logic)</div>	
"Is it possible to handle this data hazard with only forwarding?&nbsp;<img src=""paste-c2f9ef571cf4fc926278d799c575cac155953fd1.jpg"">"	<div>No, the value loaded from memory is not available until LD's 4th clock cycle.</div>	
What is forwarding and interlocking?	Not all hazards can be handled by forwarding alone. Example: true dependence with load operation.	
What are control hazards and their consequences?	- computation of the target and condition is done in the EX phase and it replaces PC in the MA phase<div>- condition typically depends on the EXE phase of the previous instruction requiring forwarding</div><div>- only after 3 cycles the correct instruction can be loaded</div>	
What does computing the condition and target in ID fix?	- control harzards due to target and condition being computed in the EX phase, reducing stall cycles.	
What are the effects of early computation in ID in a basic instruction pipeline?	- additional ALU is required in ID since the original ALU cannot be used.<div>- data dependence with previous arithmetic instruction, RAW hazard</div><div>- critical path in ID phase is prolongated: decoding, computation of branch target, updating PC for critical path</div>	
How does a delay slot help with a control hazard?	- the compiler's instruction scheduling part inserts independent instructions to fill up stall cycles<div>- can be used in combination with early computation</div>	
In static branch prediction (hardware based), why are backward jumps always predicticed to be taken?	There is a high chance that there is a loop and the chances of staying in a loop is higher than leaving the loop.	
Where does the hardware based static branch prediction take place?&nbsp;	processor	
How does a compiler based static branch prediction predict branches?	Specification via a bit in the jump opcode, this is detemined by program analysis or profiling.	
Why does a dynamic branch prediction lead to more precise predictions?	The history of a jump is taken into account.	
One disadvantage of dynamic branch prediction	Expensive interms of hardware.	
Why do we not need the last two bits in an address tag from an entry in a branch prediction buffer?	We don't need byte information.	
Name an example and explain why: when is a two bit predictor better than a single bit predictor?	A single bit predictor is suboptimal for nested loops due to an extra wrong prediction in every first interation of the inner loop.	
TODO: Why is a small prediction buffer sufficient?		
How do (m,n) predictors work?	Use the history of last m jumps to select one of 2^m n-bit predictors.	
What is a pattern history table in the context of (m,n) correlation predictors for branch prediction?	The PHT stores a list of 2^m n-bit predictors. The BHR (branch history register) is an m-bit shift register and stores the global history of the last m jumps. the BHR gives the index of the pattern history table.	
When is a branch target buffer advantageous?	When the computation of the target address is late in the pipeline.	
What is a branch target buffer?	- stores the jump address and the target address<div>- can be used in the IF phase, since we have the address of the jump instruction</div><div>- can be combined with a predictor</div>	
What is a superscalar processor?	A superscalar processor can execute more than one instruction at the same time in all pipeline stages. Achieves a throughput of multiple instructions per cycle.	
(Extended pipeline) what is instruction fetch?	Includes components such as instruction cache and the branch prediction logic.	
Name the 7 stages in the extended pipeline (mordern processors)	Fetch, decode, rename, issue, execution, write-back and commit.	
"Is it possible to handle this data hazard with only forwarding?&amp;nbsp;&lt;img src=""paste-c2f9ef571cf4fc926278d799c575cac155953fd1.jpg""&gt;"	&lt;div&gt;No, the value loaded from memory is not available until LD's 4th clock cycle.&lt;/div&gt;	
Where does the hardware based static branch prediction take place?&amp;nbsp;	processor	
(Extended Pipeline) What are the components in IF?	<div>- Multiple branch predictors in the first cycle<br></div><div>- fetch address calculation</div>-instruction cache access: instruction cache data array, instruction cache tag array, instruction cache TLB aray<div>-instructions drive to decode storage</div>	
(Extended pipeline) Why are hybrid branch predictors needed in IF?	The effectiveness of predictors depends on the code and other circumstances. Different predictors are suited for different applications/contexts. The selector is updated according to the correctness of the predictors.	
(Extended pipeline) What is a return address stack in IF?	- Special hardware predicting function returns<div>- Hardware LIFO structure</div><div>- if unlimited all return addresses would be correctly predicted</div>	
What are the input and outputs of&nbsp;instruction decoding?	Input: raw stream of bytes<div>Output: series of control signals</div>	
Differences between RISC and CISC decoding	- RISC has fixed instruction length, easier to identify instructions<div>- RISC has fewer encoding formats</div><div>- RISC has simple instructions, so only a few control signals are generated for the next stage</div><div>- RISC enables single cycle decoding using simple Programmable Logic Array and smaller look up tables doe to its simplicity</div>	
List some prefixes opcodes can have in x86	- prefixes for string instruction, e.g. repeat string instruction<div>- atomic operation i.e.&nbsp;<em>executed without any other process being able to</em> read or change state during it</div><div>- operand type override</div>	
(Extended Pipeline) What is the purpose of an instruction queue?	It hides bubbles in the ILD and allows the ILD to proceed when complex translations ar required in the subsequent decoder.	
(Extended pipeline) What does instruction length decode in ID do?	- identifies instructions<div>- decodes all prefixes</div><div>- marks various properties that simplify dynamic translation</div><div>- most instructions are handled in a single cycle</div><div>- length changing prefixes require six cycles</div>	
What is the purpose of the loop stream detector?	- the need for branch prediction and fetching is eliminated, since the same instruction is provided by the loop stream detector over and over again<div>- saves power</div>	
formula for performance	[latex]performance = $\frac{1}{\text{execution time}}$[/latex]	
Give three formulae for execution time	"[latex]\begin{itemize}<br>\item exec time = \#cycles $\times$ clock period = $\frac{\# \text{cycles}}{\text{clock rate}}$<br>&nbsp;&nbsp;&nbsp; \item exec time = $\frac{\# \text{instructions} \times \text{CPI}}{\text{clock rate}}$\\<br>where CPI $ = $ avg \#cycles per instr.<br> \end{itemize}<br>[/latex]"	
Give the formulae for&nbsp;<b>energy&nbsp;</b>and&nbsp;<b>power</b>	[latex]\begin{itemize}<br>&nbsp; \item energy $\propto$ capacitive load $\times$ voltage$^2$<br>&nbsp; \item power $\propto$ capacitive load $\times$ voltage$^2 \times$ frequency switched<br> \end{itemize}[/latex]	
